Client:

// Register/Login
register:username:password:type -> registers new user
login:username:password:type -> login existing user

// Driver
model:licence -> sets the driver car properties
x:y -> sets the driver availability to drive and his new home to (x,y)

// Passenger
want_trip -> starts a new trip
x1:y1:x2:y2 -> sets the trip request locations
cancel_trip -> cancels the current trip

---

Server: receives - sends
--> 1 goes to login manager, 2 goes to tripmanager
1:reg:username:password:type - register_ok
1:log:username:password:type - login_failed/login_ok
2:can_drive - driver_ready/driver_error
2:want_trip - trip_request/trip_started/trip_error
2:cancel_trip - trip_cancel_error/trip_cancel_ok

---

Modules:
uber: main module, starts the server, spawns acceptor/user
usermanager: handles tcp incoming data, works as a bridge between user and loginmanager
loginmanager: handles login logic
tripmanager: handles trip logic
aux: Auxiliary functions used across all modules